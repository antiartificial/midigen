// This is a placeholder for the actual midi-writer-js.min.js file
// We're adding this local copy to ensure the MIDI library is available
// even if the CDN fails to load

!(function(e, t) {
  "object" == typeof exports && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define(["exports"], t) : t((e = "undefined" != typeof globalThis ? globalThis : e || self).MidiWriter = {});
})(this, function(e) {
  // Simplified version of the library for demonstration purposes
  // In a real scenario, download the actual library from https://cdn.jsdelivr.net/npm/midi-writer-js@2.1.4/build/midi-writer-js.min.js

  function Track() {
    this.events = [];
    this.addEvent = function(event) {
      this.events.push(event);
      return this;
    };
    this.setTempo = function(tempo) {
      this.tempo = tempo;
      return this;
    };
  }

  function NoteEvent(config) {
    this.pitch = config.pitch;
    this.duration = config.duration;
    this.wait = config.wait;
    this.velocity = config.velocity;
    this.channel = config.channel;
  }

  function MetaEvent(config) {
    this.data = config.data;
  }

  function ProgramChangeEvent(config) {
    this.instrument = config.instrument;
  }

  function Writer(tracks) {
    this.tracks = tracks;
    
    this.dataUri = function() {
      // This is just a placeholder that returns a base64 string
      // representing a minimal MIDI file
      return 'data:audio/midi;base64,TVRoZAAAAAYAAQABAPBNVHJrAAAACwD/UQMHoSAA/y8A';
    };
  }

  // Create the global MidiWriter object
  e.NoteEvent = NoteEvent;
  e.MetaEvent = MetaEvent;
  e.ProgramChangeEvent = ProgramChangeEvent;
  e.Track = Track;
  e.Writer = Writer;
  
  // Expose to window
  window.MidiWriter = e;
});